version: 3

# Taskfile principal - T√¢ches globales et inclusions
# Charge automatiquement les variables depuis le fichier .env s'il existe
dotenv: [ '.env', '.env.example' ]

includes:
  docker: ./taskfiles/docker/Taskfile.yml
  utils: ./taskfiles/utils/Taskfile.yml
  env: ./taskfiles/env/Taskfile.yml
  nodejs: ./taskfiles/nodejs/Taskfile.yml
  download: ./taskfiles/download/Taskfile.yml

vars:
  # Variables avec valeurs par d√©faut depuis .env ou valeurs de fallback
  PROJECT_NAME: '{{.PROJECT_NAME | default "docker"}}'
  PROJECT_VERSION: '1.0.0'
  ENVIRONMENT: '{{.ENVIRONMENT | default "development"}}'
  # Variables Flutter et Node.js depuis .env.example
  NODE_VERSION: '{{.NODE_VERSION | default "20"}}'
  PHP_EXTENSIONS: "https://github.com/mlocati/docker-php-extension-installer/releases/download/2.9.13/install-php-extensions"
  WORDPRESS_PHAR: "https://github.com/wp-cli/wp-cli/releases/download/v2.12.0/wp-cli-2.12.0.phar"
  SYMFONY_CLI: "https://github.com/symfony-cli/symfony-cli/releases/download/v5.15.1/symfony-cli_5.15.1_amd64.deb"

tasks:
  default:
    desc: "Affiche l'aide et les t√¢ches disponibles"
    silent: true
    cmds:
    - echo "üõ†Ô∏è  Collection de Taskfiles pour le d√©veloppement"
    - echo ""
    - echo "T√¢ches globales disponibles :"
    - task --list
    - echo ""

  info:
    desc: "Affiche les informations du projet avec les variables d'environnement"
    silent: true
    cmds:
    - |
      echo "üõ†Ô∏è  {{.PROJECT_NAME}} v{{.PROJECT_VERSION}} - Collection de Taskfiles"
      echo "Environnement: {{.ENVIRONMENT}}"
      echo "Node.js version: {{.NODE_VERSION}}"

  help:
    desc: "Affiche l'aide d√©taill√©e"
    aliases: [ h ]
    silent: true
    cmds:
    - task: default

  create:
    desc: "Construit les images Docker d√©finies dans les Taskfiles inclus"
    internal: true
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    vars:
      FOLDER: '{{.FOLDER | default ""}}'
      VERSION: '{{.VERSION | default ""}}'
      NUMBER: '{{.NUMBER | default ""}}'
      PHPLISTEXTENSION56: '{{.PHPLISTEXTENSION | default "@composer amqp apcu bcmath blackfire exif gd imagick intl ldap mysqli opcache pdo_mysql pdo_pgsql redis shmop soap sockets tidy zip gnupg"}}'
      PHPLISTEXTENSION70: '{{.PHPLISTEXTENSION | default "@composer"}}'
      PHPLISTEXTENSION71: '{{.PHPLISTEXTENSION | default "@composer"}}'
      PHPLISTEXTENSION72: '{{.PHPLISTEXTENSION | default "@composer"}}'
      PHPLISTEXTENSION73: '{{.PHPLISTEXTENSION | default "@composer"}}'
      PHPLISTEXTENSION74: '{{.PHPLISTEXTENSION | default "@composer amqp apcu bcmath blackfire exif gd imagick intl ldap mysqli opcache pdo_mysql pdo_pgsql redis shmop soap sockets tidy zip gnupg"}}'
      PHPLISTEXTENSION80: '{{.PHPLISTEXTENSION | default "@composer amqp apcu bcmath blackfire exif gd imagick intl ldap mysqli opcache pdo_mysql pdo_pgsql redis shmop soap sockets tidy zip gnupg"}}'
      PHPLISTEXTENSION81: '{{.PHPLISTEXTENSION | default "@composer amqp apcu bcmath blackfire exif gd imagick intl ldap mysqli opcache pdo_mysql pdo_pgsql redis shmop soap sockets tidy zip gnupg"}}'
      PHPLISTEXTENSION82: '{{.PHPLISTEXTENSION | default "@composer amqp apcu bcmath blackfire exif gd imagick intl ldap mysqli opcache pdo_mysql pdo_pgsql redis shmop soap sockets tidy zip gnupg"}}'
      PHPLISTEXTENSION83: '{{.PHPLISTEXTENSION | default "@composer amqp apcu bcmath blackfire exif gd imagick intl ldap mysqli opcache pdo_mysql pdo_pgsql redis shmop soap sockets tidy zip gnupg"}}'
      PHPLISTEXTENSION84: '{{.PHPLISTEXTENSION | default "@composer amqp apcu bcmath blackfire exif gd imagick intl ldap mysqli opcache pdo_mysql pdo_pgsql redis shmop soap sockets tidy zip gnupg"}}'
    cmds:
    - mkdir -p build/{{.FOLDER}}/{{.VERSION}}
    - cp images/{{.FOLDER}}/Dockerfile build/{{.FOLDER}}/{{.VERSION}}/Dockerfile
    - sed -i 's#VERSIONIMAGE#php:{{.VERSION}}-{{.FOLDER}}#' build/{{.FOLDER}}/{{.VERSION}}/Dockerfile
    - sed -i 's#PHPEXTENSIONS#{{.PHP_EXTENSIONS}}#' build/{{.FOLDER}}/{{.VERSION}}/Dockerfile
    - |
      if [ "{{.NUMBER}}" = "5.6" ]; then 
        sed -i 's#PHPLISTEXTENSION#{{.PHPLISTEXTENSION56}}#' build/{{.FOLDER}}/{{.VERSION}}/Dockerfile;
      elif [ "{{.NUMBER}}" = "7.0" ]; then 
        sed -i 's#PHPLISTEXTENSION#{{.PHPLISTEXTENSION70}}#' build/{{.FOLDER}}/{{.VERSION}}/Dockerfile;
      elif [ "{{.NUMBER}}" = "7.1" ]; then 
        sed -i 's#PHPLISTEXTENSION#{{.PHPLISTEXTENSION71}}#' build/{{.FOLDER}}/{{.VERSION}}/Dockerfile;
      elif [ "{{.NUMBER}}" = "7.2" ]; then 
        sed -i 's#PHPLISTEXTENSION#{{.PHPLISTEXTENSION72}}#' build/{{.FOLDER}}/{{.VERSION}}/Dockerfile;
      elif [ "{{.NUMBER}}" = "7.3" ]; then 
        sed -i 's#PHPLISTEXTENSION#{{.PHPLISTEXTENSION73}}#' build/{{.FOLDER}}/{{.VERSION}}/Dockerfile;
      elif [ "{{.NUMBER}}" = "7.4" ]; then 
        sed -i 's#PHPLISTEXTENSION#{{.PHPLISTEXTENSION74}}#' build/{{.FOLDER}}/{{.VERSION}}/Dockerfile;
      elif [ "{{.NUMBER}}" = "8.0" ]; then 
        sed -i 's#PHPLISTEXTENSION#{{.PHPLISTEXTENSIONN80}}#' build/{{.FOLDER}}/{{.VERSION}}/Dockerfile;
      elif [ "{{.NUMBER}}" = "8.1" ]; then 
        sed -i 's#PHPLISTEXTENSION#{{.PHPLISTEXTENSIONN81}}#' build/{{.FOLDER}}/{{.VERSION}}/Dockerfile;
      elif [ "{{.NUMBER}}" = "8.2" ]; then 
        sed -i 's#PHPLISTEXTENSION#{{.PHPLISTEXTENSIONN82}}#' build/{{.FOLDER}}/{{.VERSION}}/Dockerfile;
      elif [ "{{.NUMBER}}" = "8.3" ]; then 
        sed -i 's#PHPLISTEXTENSION#{{.PHPLISTEXTENSIONN83}}#' build/{{.FOLDER}}/{{.VERSION}}/Dockerfile;
      elif [ "{{.NUMBER}}" = "8.4" ]; then 
        sed -i 's#PHPLISTEXTENSION#{{.PHPLISTEXTENSIONN84}}#' build/{{.FOLDER}}/{{.VERSION}}/Dockerfile;
      fi
    - sed -i 's#SYMFONYCLI#{{.SYMFONY_CLI}}#' build/{{.FOLDER}}/{{.VERSION}}/Dockerfile
    - echo "Dockerfile cr√©√© dans build/{{.FOLDER}}/{{.VERSION}}/Dockerfile"

  create-fpm:
    desc: "Cr√©e le Dockerfile pour PHP-FPM"
    silent: true
    vars:
      VERSION: '{{.VERSION | default ""}}'
      NUMBER: '{{.NUMBER | default ""}}'
    cmds:
    - task: create
      vars:
        FOLDER: "fpm"

  matrix:
    desc: "G√©n√®re une matrice JSON pour les versions PHP √† utiliser dans GitHub Actions"
    silent: true
    vars:
      VERSION: '{{.VERSION | default ""}}'
    cmds:
    - echo "https://www.php.net/releases/index.php?json&version={{.VERSION}}&max=1000"
    - wget -O php_versions{{.VERSION}}.json "https://www.php.net/releases/index.php?json&version={{.VERSION}}&max=1000"
    - |
      jq -r '{versions: (keys)}' php_versions{{.VERSION}}.json > matrix_{{.VERSION}}.json
    - rm -rf php_versions{{.VERSION}}.json

  matrix-all:
    cmds:
    - task: matrix
      vars:
        VERSION: "5.6"
    - task: matrix
      vars:
        VERSION: "7.0"
    - task: matrix
      vars:
        VERSION: "7.1"
    - task: matrix
      vars:
        VERSION: "7.2"
    - task: matrix
      vars:
        VERSION: "7.3"
    - task: matrix
      vars:
        VERSION: "7.4"
    - task: matrix
      vars:
        VERSION: "8.0"
    - task: matrix
      vars:
        VERSION: "8.1"
    - task: matrix
      vars:
        VERSION: "8.2"
    - task: matrix
      vars:
        VERSION: "8.3"
    - task: matrix
      vars:
        VERSION: "8.4"

  create-apache:
    desc: "Cr√©e le Dockerfile pour PHP-Apache"
    silent: true
    vars:
      VERSION: '{{.VERSION | default ""}}'
      NUMBER: '{{.NUMBER | default ""}}'
    cmds:
    - task: create
      vars:
        FOLDER: "apache"

  create-all:
    desc: "Cr√©e le Dockerfile pour PHP-Apache"
    silent: true
    vars:
      VERSION: '{{.VERSION | default ""}}'
      NUMBER: '{{.NUMBER | default ""}}'
    cmds:
    - task: create-apache
    - task: create-fpm

  create-with-matrix:
    desc: "Cr√©e les Dockerfiles pour toutes les versions PHP d√©finies dans la matrice"
    silent: true
    vars:
      NUMBER: '{{.NUMBER | default ""}}'
    cmds:
    - |
      for version in $(jq -r '.versions[]' matrix_{{.NUMBER}}.json); do
        echo "Cr√©ation des Dockerfiles pour PHP $version"
        task create-all VERSION=$version NUMBER={{.NUMBER}}
      done

  build:
    desc: "Construit les images Docker d√©finies dans les Taskfiles inclus"
    silent: true
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    vars:
      FOLDER: '{{.FOLDER | default ""}}'
      VERSION: '{{.VERSION | default ""}}'
    cmds:
    - docker build -t koromerzhin/php:{{.VERSION}}-{{.FOLDER}} build/{{.FOLDER}}/{{.VERSION}} --target build-{{.FOLDER}}
    - docker build -t koromerzhin/php:{{.VERSION}}-{{.FOLDER}}-xdebug build/{{.FOLDER}}/{{.VERSION}} --target build-{{.FOLDER}}-xdebug
    - docker build -t koromerzhin/php:{{.VERSION}}-{{.FOLDER}}-wordpress build/{{.FOLDER}}/{{.VERSION}} --target build-{{.FOLDER}}-wordpress
    - docker build -t koromerzhin/php:{{.VERSION}}-{{.FOLDER}}-wordpress-xdebug build/{{.FOLDER}}/{{.VERSION}} --target build-{{.FOLDER}}-wordpress-xdebug
    - docker build -t koromerzhin/php:{{.VERSION}}-{{.FOLDER}}-symfony build/{{.FOLDER}}/{{.VERSION}} --target build-{{.FOLDER}}-symfony
    - docker build -t koromerzhin/php:{{.VERSION}}-{{.FOLDER}}-symfony-xdebug build/{{.FOLDER}}/{{.VERSION}} --target build-{{.FOLDER}}-symfony-xdebug

  build-fpm:
    desc: "Construit l'image Docker pour PHP-FPM"
    silent: true
    vars:
      NUMBER: '{{.NUMBER | default ""}}'
      VERSION: '{{.VERSION | default ""}}'
    cmds:
    - task: build
      vars:
        FOLDER: "fpm"

  build-apache:
    desc: "Construit l'image Docker pour PHP-Apache"
    silent: true
    vars:
      VERSION: '{{.VERSION | default ""}}'
    cmds:
    - task: build
      vars:
        FOLDER: "apache"

  build-all:
    desc: "Construit l'image Docker pour PHP-Apache"
    silent: true
    vars:
      VERSION: '{{.VERSION | default ""}}'
    cmds:
    - task: build-apache
    - task: build-fpm

  push:
    desc: "Pousse toutes les images Docker vers Docker Hub"
    preconditions:
    - sh: command -v docker
      msg: "Docker n'est pas install√© ou accessible"
    silent: true
    cmds:
    - docker push koromerzhin/php -a
