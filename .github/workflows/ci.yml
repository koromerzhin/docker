name: Continuous Integration
on: [push]
jobs:
  start:
    runs-on: ubuntu-20.04
    steps:
      - name: cdout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Cache npm packages
        id: npm-cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install npm dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: make node_modules
  tests:
    needs: start
    runs-on: ubuntu-20.04
    steps:
      - name: cdout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Cache npm packages
        id: npm-cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: linter markdown
        run: make linter readme
      - name: linter docker
        run: make linter dockerfile
  django:
      strategy:
        matrix:
          django: [3.9.0]
      name: DJANGO ${{ matrix.django }}
      needs: tests
      runs-on: ubuntu-20.04
      steps:
      - name: cdout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: 'Generate image'
        run: make generate-django ${{ matrix.django }}
      - name: 'Set latest'
        if: matrix.django == '3.9.0'
        run: make latest-django ${{ matrix.django }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: user/app:latest
  phpfpm:
      strategy:
        matrix:
          php: [7.4.12, 8.0.15, 8.1.2]
      name: PHP ${{ matrix.php }}
      needs: tests
      runs-on: ubuntu-20.04
      steps:
      - name: cdout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: 'Generate image'
        run: make generate-phpfpm ${{ matrix.php }}
      - name: 'Set latest'
        if: matrix.php == '8.1.2'
        run: make latest-phpfpm ${{ matrix.php }}
  angular:
      strategy:
        matrix:
          angular: [10.2.0]
      name: ANGULAR ${{ matrix.angular }}
      needs: tests
      runs-on: ubuntu-20.04
      steps:
      - name: cdout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: 'Generate image'
        run: make generate-angular ${{ matrix.angular }}
      - name: 'Set latest'
        if: matrix.angular == '10.2.0'
        run: make latest-angular ${{ matrix.angular }}
  quasar:
      strategy:
        matrix:
          quasar: [1.1.3]
      name: QUASAR ${{ matrix.quasar }}
      needs: tests
      runs-on: ubuntu-20.04
      steps:
      - name: cdout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: 'Generate image'
        run: make generate-quasar ${{ matrix.quasar }}
      - name: 'Set latest'
        if: matrix.quasar == '1.1.3'
        run: make latest-quasar ${{ matrix.quasar }}
  remotion:
      strategy:
        matrix:
          remotion: [1.3.0]
      name: REMOTION ${{ matrix.remotion }}
      needs: tests
      runs-on: ubuntu-20.04
      steps:
      - name: cdout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: 'Generate image'
        run: make generate-remotion ${{ matrix.remotion }}
      - name: 'Set latest'
        if: matrix.remotion == '1.3.0'
        run: make latest-remotion ${{ matrix.remotion }}
  nodejs:
      strategy:
        matrix:
          nodejs: [15.1.0]
      name: NODEJS ${{ matrix.nodejs }}
      needs: tests
      runs-on: ubuntu-20.04
      steps:
      - name: cdout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: 'Generate image'
        run: make generate-nodejs ${{ matrix.nodejs }}
      - name: 'Set latest'
        if: matrix.nodejs == '15.1.0'
        run: make latest-nodejs ${{ matrix.nodejs }}